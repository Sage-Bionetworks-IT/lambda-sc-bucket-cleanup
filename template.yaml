AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  An application to clean up S3 buckets after it has been terminated from the Service Catalog.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Parameters:
  ArchivedPeriod:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 90
    Description: (Optional) Cleanup buckets that have been archived this number of days ago
  EnableSchedule:
    Description: >
      true to run on a schedule, false to disable. If enabled a valid Schedule must be provided
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Schedule:
    Description: >
      Schedule to execute the lambda, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: cron(0 09 ? * MON *)  # Run every Monday at 9am
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"

Resources:
  BucketCleanupFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: sc_bucket_cleanup/app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt FunctionRole.Arn
      Events:
        BucketCleanup:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cleanup
            Method: get
        RecurringSchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref Schedule
            Enabled: !Ref EnableSchedule
      Environment:
        Variables:
          ARCHIVED_PERIOD: !Ref ArchivedPeriod

  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BucketCleanupApi:
    Description: "API Gateway endpoint URL for Prod stage for Bucket Cleanup function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cleanup/"
  BucketCleanupFunctionArn:
    Description: "Bucket Cleanup Lambda Function ARN"
    Value: !GetAtt BucketCleanupFunction.Arn
  BucketCleanupFunctionRoleArn:
    Description: "Implicit IAM Role created for Bucket Cleanup function"
    Value: !GetAtt FunctionRole.Arn
